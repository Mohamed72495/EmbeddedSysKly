#include <stdio.h>
#include <math.h>
#include "stdint.h"
#include "stdbool.h"
#include <stdio.h>
#include <string.h>
#include <stdlib.h>
#include"math.h"
#include "inc/tm4c123gh6pm.h"
#define RED 0x02
#define BLUE 0x04
#define GREEN 0x08
void UART_Init(void)
    {
     SYSCTL_RCGCUART_R |= 0X0020 ;                            //enable clock of UART5
     SYSCTL_RCGCGPIO_R |= 0x0010;                             //enable PORTE
      while((SYSCTL_PRGPIO_R&0x0010)==0){};                   //delay


/* UART5 Setting */
     UART5_CTL_R &= ~0x0001 ;                              //disable UART 
         UART5_IBRD_R = 0x68 ;                                //IBRD = system clock / (16 * clock div) 
     UART5_FBRD_R = 0x0B ;                                 // FBDR = round ( 0.16667 * 64)+0.5
         UART5_LCRH_R = 0x0070;                                // set 8 bits for length , FIFO enable , one stop , no parity 
         UART5_CTL_R = 0x0301 ;                               //enable UARTEN , TXE and RXE */



/* UART0 TX0 and RX0 use PE5 and PE4*/
        GPIO_PORTE_DEN_R |= 0x30;                                                           //use pin 4,5 of PORTE as a digital
        GPIO_PORTE_AFSEL_R |= 0x30 ;                                                        //use pin 4,5 of PORTE as an Alternative function
    GPIO_PORTE_PCTL_R =(GPIO_PORTE_PCTL_R & 0xFF00FFFF)+0x00110000 ;                    //configure PE4 and PE5 for UART
    GPIO_PORTE_AMSEL_R &= ~0x30;                                                        //no analog for PE4 , PE5 

}

void init(){
SYSCTL_RCGCGPIO_R |=0x20 ;
while((SYSCTL_PRGPIO_R & 0x20)==0){};

GPIO_PORTF_LOCK_R=0x4C4F434B;
GPIO_PORTF_CR_R=0x1F;
GPIO_PORTF_AFSEL_R=0;
GPIO_PORTF_PCTL_R=0;
GPIO_PORTF_AMSEL_R=0;
GPIO_PORTF_DIR_R=0x0E;
GPIO_PORTF_DEN_R=0x1F;
GPIO_PORTF_PUR_R=0x11;
//GPIO_PORTF_DATA_R&=0x0E;
}
double radians(double n){
      return n*3.141592654/180;
}
double GPS_distance_between (double lat1,double long1,double lat2,double long2) {
  double delta = radians(long1-long2);
  double sdlong = sin(delta);
  double cdlong = cos(delta);
  lat1 = radians(lat1);
  lat2 = radians(lat2);
  double slat1 = sin(lat1);
  double clat1 = cos(lat1);
  double slat2 = sin(lat2);
  double clat2 = cos(lat2);
  delta = (clat1 * slat2) - (slat1 * clat2 * cdlong);
  delta = pow(delta,2);
  delta += pow(clat2 * sdlong,2);
  delta = sqrt(delta);
  double denom = (slat1 * slat2) + (clat1 * clat2 * cdlong);
  delta = atan2(delta, denom);
  return ( delta * 6372795);
}

int hund(double distance){
    int xx;
    int y;
    int z;
    int q;
    int v;
    int n;

    xx =(int) (distance/100);  //hundreds
    y =(int) (distance/10);
    z = (int) xx *10;
    q = (int) (y-z);   //tens
    v=(int) (y*10);  //450
    n= (int) (distance - v);
    return (xx+48);
}



int tens(double distance){
    int xx;
    int y;
    int z;
    int q;
    int v;
    int n;

    xx =(int) (distance/100);  //hundreds
    y =(int) (distance/10);
    z = (int) xx *10;
    q = (int) (y-z);   //tens
    v=(int) (y*10);  //450
    n= (int) (distance - v);
    return (q+48);
}



int ones(double distance){
    int xx;
    int y;
    int z;
    int q;
    int v;
    int n;

    xx =(int) (distance/100);  //hundreds
    y =(int) (distance/10);
    z = (int) xx *10;
    q = (int) (y-z);   //tens
    v=(int) (y*10);  //450
    n= (int) (distance - v);
    return (n+48);

}


void LCD_COMM(unsigned char command)
{
GPIO_PORTA_DATA_R = 0x00; //RS =0, E=0, RW=0
GPIO_PORTB_DATA_R =command;
GPIO_PORTA_DATA_R =0x80; //E=1 to secure command
delay_micro(0);
GPIO_PORTA_DATA_R =0x00;
if(command <4) delay_milli(2); else delay_micro(37);
    }
